{"version":3,"sources":["MyComponents/sidebar.js","MyComponents/Main2.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","style","backgroundColor","className","draggable","initialElements","id","type","data","label","position","x","y","Main2","reactFlowWrapper","useRef","useState","reactFlowInstance","setReactFlowInstance","elements","setElements","height","width","ref","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onLoad","_reactFlowInstance","onDrop","preventDefault","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","newNode","es","concat","onDragOver","dropEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAGe,SAASA,IACtB,IAAMC,EAAc,SAACC,EAAOC,GAE1BD,EAAME,aAAaC,QAAQ,wBAAyBF,GACpDD,EAAME,aAAaE,cAAgB,QAGrC,OACE,wBAAOC,MAAO,CAACC,gBAAgB,WAA/B,UAEE,sBAAKC,UAAU,cAAf,UACE,qFADF,iEAKA,qBACEA,UAAU,gBACVR,YAAa,SAACC,GAAD,OAAWD,EAAYC,EAAO,UAC3CQ,WAAS,EAHX,wBAQA,qBACED,UAAU,UACVR,YAAa,SAACC,GAAD,OAAWD,EAAYC,EAAO,YAC3CQ,WAAS,EAHX,0BAOA,qBACED,UAAU,iBACVR,YAAa,SAACC,GAAD,OAAWD,EAAYC,EAAO,WAC3CQ,WAAS,EAHX,4BC5BN,IAAMC,EAAkB,CACtB,CACEC,GAAI,IACJC,KAAM,QACNC,KAAM,CAAEC,MAAO,cACfC,SAAU,CAAEC,EAAG,IAAKC,EAAG,KASvBN,EAAK,EAGM,SAASO,IAEtB,IAAMC,EAAmBC,iBAAO,MAChC,EAAkDC,mBAAS,MAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAgCF,mBAASX,GAAzC,mBAAOc,EAAP,KAAiBC,EAAjB,KA+BA,OACE,qBAAKjB,UAAU,UAAf,SACE,eAAC,IAAD,WACE,qBACEA,UAAU,oBACVF,MAAO,CAAEoB,OAAQ,QAASC,MAAO,QAAUpB,gBAAgB,SAC3DqB,IAAKT,EAHP,SAKE,cAAC,IAAD,CACEK,SAAUA,EACVK,UAtCQ,SAACC,GAAYL,GAAY,SAACM,GAAD,OAASC,YAAQF,EAAQC,OAuC1DE,iBAtCe,SAACC,GAAD,OAAqBT,GAAY,SAACM,GAAD,OAASI,YAAeD,EAAkBH,OAuC1FK,OAtCK,SAACC,GAAD,OAAuBd,EAAqBc,IAuCjDC,OAlCK,SAACrC,GACdA,EAAMsC,iBACN,IAAMC,EAAkBrB,EAAiBsB,QAAQC,wBAE3C9B,EAAOX,EAAME,aAAawC,QAAQ,yBAClC5B,EAAWO,EAAkBsB,QAAQ,CACzC5B,EAAGf,EAAM4C,QAAUL,EAAgBM,KACnC7B,EAAGhB,EAAM8C,QAAUP,EAAgBQ,MAG/BC,EAAU,CACdtC,GA3BQ,kBAAiBA,KA4BzBC,OACAG,WACAF,KAAM,CAAEC,MAAM,GAAD,OAAKF,EAAL,WAIfa,GAAY,SAACyB,GAAD,OAAQA,EAAGC,OAAOF,OAiBtBG,WAvCS,SAACnD,GAClBA,EAAMsC,iBACNtC,EAAME,aAAakD,WAAa,QA+B1B,SAQE,cAAC,IAAD,QAGJ,cAACtD,EAAD,SClEOuD,MARf,WACE,OACE,qBAAK9C,UAAU,MAAf,SACE,cAACU,EAAD,OCOSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.188e654b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//no-anonymous-default-export\r\nexport default function Sidebar()  {\r\n  const onDragStart = (event, nodeType) => \r\n  {\r\n    event.dataTransfer.setData(\"application/reactflow\", nodeType);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  \r\n  };\r\n  return (\r\n    <aside style={{backgroundColor:\"skyblue\"}}>\r\n\r\n      <div className=\"description\">\r\n        <h3> You can drag these nodes to the pane on the right.</h3> \r\n        **NOTE** [ to delete any node just backspace on that node ]\r\n      </div>\r\n\r\n      <div\r\n        className=\"dndnode input\"\r\n        onDragStart={(event) => onDragStart(event, \"input\")}\r\n        draggable \r\n        // style={{backgroundColor:\"red\"}}\r\n        >\r\n        Input Node\r\n      </div>\r\n      <div\r\n        className=\"dndnode\"\r\n        onDragStart={(event) => onDragStart(event, \"default\")}\r\n        draggable\r\n      >\r\n        Default Node\r\n      </div>\r\n      <div\r\n        className=\"dndnode output\"\r\n        onDragStart={(event) => onDragStart(event, \"output\")}\r\n        draggable\r\n    >\r\n        Output Node\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n//import/no-anonymous-default-export","import React, { useState, useRef } from \"react\";\r\nimport ReactFlow, { ReactFlowProvider, addEdge, removeElements, Controls } from \"react-flow-renderer\";\r\nimport \"./styles.css\";\r\nimport Sidebar from \"./sidebar\";\r\n\r\nconst initialElements = [\r\n  {\r\n    id: \"1\",\r\n    type: \"input\",\r\n    data: { label: \"input node\" },\r\n    position: { x: 250, y: 5 }\r\n  },];\r\n//   {\r\n//     id: \"2\",\r\n//     type: \"input\",\r\n//     data: { label: \"input node\" },\r\n//     position: { x: 250, y: 5 }\r\n//   }];\r\n\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nexport default function Main2() {\r\n\r\n  const reactFlowWrapper = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [elements, setElements] = useState(initialElements);\r\n\r\n\r\n  const onConnect = (params) =>{ setElements((els) => addEdge(params, els))};\r\n  const onElementsRemove = (elementsToRemove) =>setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance) =>setReactFlowInstance(_reactFlowInstance);\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n  const onDrop = (event) => {\r\n    event.preventDefault();\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n\r\n    const type = event.dataTransfer.getData(\"application/reactflow\");\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top\r\n    });\r\n\r\n    const newNode = {\r\n      id: getId(),\r\n      type,\r\n      position,\r\n      data: { label: `${type} node` }\r\n    };\r\n    // console.log(newNode)\r\n    \r\n    setElements((es) => es.concat(newNode));\r\n\r\n  };\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div\r\n          className=\"reactflow-wrapper\"\r\n          style={{ height: \"500px\", width: \"500px\" , backgroundColor:\"black\" }}\r\n          ref={reactFlowWrapper}\r\n        >\r\n          <ReactFlow\r\n            elements={elements}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n          >\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import './App.css';\nimport Main2 from './MyComponents/Main2';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main2 />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}